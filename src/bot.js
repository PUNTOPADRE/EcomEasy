require('dotenv').config();
const TelegramBot = require('node-telegram-bot-api');
const userController = require('./controllers/userController');
const catalogController = require('./controllers/catalogController');
const productController = require('./controllers/productController');
const cartController = require('./controllers/cartController');
const orderController = require('./controllers/orderController')

const token = process.env.TELEGRAM_BOT_TOKEN;

const bot = new TelegramBot(token, { polling: true });

let awaitingPassword = false;
let adminPasswords = [];
let userStates = {};
let awaitingCategoryName = false;
let awaitingCategoryIcon = false;
let tempCategory = {};
let chatStates = {};
let pendingOrdersMessageIds = [];


function validatePassword(password) {
    const regex = /^(?=.*[A-Za-z])(?=.*\d)(?=.*[!@#$%^&*()_+\-=\[\]{};':"\\|,.<>\/?]).{10,}$/;
    return regex.test(password);
}

async function showCart(chatId) {
    const cartItems = await cartController.getCartWithTotals(chatId);
    let messageText = 'Art√≠culos en tu carrito:\n';
    let total = 0;

    if (cartItems.length === 0) {
        messageText += "Tu carrito est√° vac√≠o.";
    } else {
        for (const item of cartItems) {
            messageText += `${item.cantidad_total}x ${item.nombre} - Unidad: ${item.precio.toFixed(2)}‚Ç¨ - Total: ${item.precio_total.toFixed(2)}‚Ç¨\n`;
            total += item.precio_total;
        }
        messageText += `\nTOTAL: ${total.toFixed(2)}‚Ç¨`;
    }

    const keyboard = cartItems.length > 0 ?
        [
            [{ text: 'Vaciar carrito', callback_data: 'empty_cart' }, { text: 'Editar carrito', callback_data: 'edit_cart' }],
            [{ text: 'Volver', callback_data: 'back_to_language' }]
        ] :
        [[{ text: 'Volver', callback_data: 'back_to_language' }]];

    // Aseg√∫rate de que este ID sea el correcto y de que se ha guardado en el estado del usuario cuando se mostr√≥ el carrito originalmente
    const cartMessageId = userStates[chatId] && userStates[chatId].cartMessageId;

    await bot.editMessageText(messageText, {
        chat_id: chatId,
        message_id: cartMessageId,
        reply_markup: {
            inline_keyboard: keyboard
        }
    });
}

// Funci√≥n para obtener el emoji de la bandera basado en el c√≥digo de idioma
function getFlagEmoji(languageCode) {
    const flags = {
        'GB': 'üá¨üáß',
        'DE': 'üá©üá™',
        'FR': 'üá´üá∑',
        'ES': 'üá™üá∏',
        // Agrega m√°s banderas seg√∫n sea necesario
    };
    return flags[languageCode] || 'üè≥Ô∏è'; // Bandera por defecto si no se encuentra el c√≥digo
}

function getAdminMenuButtons(isOwner) {
    const adminMenuButtons = [
        [{ text: 'üìÅ Categor√≠as', callback_data: 'manage_categories' }],
        [{ text: 'üì¶ Stock', callback_data: 'admin_stock' }],
        [{ text: 'üìë Pedidos', callback_data: 'manage_orders' }], // Nuevo bot√≥n para gestionar pedidos
        // ... otros botones del men√∫ de administrador
    ];
    
    if (isOwner) {
        adminMenuButtons.push([{ text: 'üë§ Administradores', callback_data: 'manage_admins' }]);
    }
    
    adminMenuButtons.push([{ text: '‚¨ÖÔ∏è Volver', callback_data: 'back_to_language' }]);

    return adminMenuButtons;
}


bot.onText(/\/admin/, async (msg) => {
    const chatId = msg.chat.id;
    // Aqu√≠ guardas que el usuario est√° en el paso de ingresar la contrase√±a
    userStates[chatId] = { step: 'awaitingAdminPassword' };
    await bot.sendMessage(chatId, "Por favor, introduce la contrase√±a de administrador:");
});

bot.onText(/\/start/, async (msg) => {
    const chatId = msg.chat.id;

    try {
        // Intenta obtener el usuario de la base de datos
        let user = await userController.getUser(chatId);
        
        // Si el usuario no existe, intenta crearlo
        if (!user) {
            await userController.createUser(chatId);
            // Vuelve a obtener la informaci√≥n del usuario despu√©s de crearlo
            user = await userController.getUser(chatId);
        }

        let userLanguage = user ? user.language : null;
        const isAdminOrOwner = await userController.checkAdminOrOwner(chatId);

        let inlineKeyboard = [
            [
                { text: "üá¨üáß", callback_data: 'language_GB' },
                { text: "üá©üá™", callback_data: 'language_DE' },
                { text: "üá´üá∑", callback_data: 'language_FR' },
                { text: "üá™üá∏", callback_data: 'language_ES' }
            ]
        ];

        if (userLanguage) {
            inlineKeyboard.push([{ text: "üìö Cat√°logo", callback_data: 'show_catalog' }]);
            inlineKeyboard.push([{ text: "üõí Carrito", callback_data: 'view_cart' }]);
            inlineKeyboard.push([{ text: "üì¶ Pedidos", callback_data: 'view_orders' }]);
        }

        if (isAdminOrOwner) {
            inlineKeyboard.push([{ text: "üõ†Ô∏è Administrador", callback_data: 'admin_panel' }]);
        }

        const languageOptions = {
            reply_markup: { inline_keyboard: inlineKeyboard }
        };

        if (userLanguage) {
            const flagEmoji = getFlagEmoji(userLanguage);
            await bot.sendMessage(chatId, `Idioma seleccionado: ${flagEmoji}`, languageOptions);
        } else {
            await bot.sendMessage(chatId, "Por favor, selecciona tu idioma:", languageOptions);
        }
    } catch (error) {
        console.error(`Error en /start: ${error}`);
        await bot.sendMessage(chatId, "Hubo un error al iniciar el bot. Por favor, intenta nuevamente.");
    }
});


bot.on('callback_query', async (callbackQuery) => {
    console.log("Callback Query recibida: ", callbackQuery.data);
    const message = callbackQuery.message;
    const chatId = message.chat.id;
    const data = callbackQuery.data;
    const messageId = message.message_id;

    // Guardar el id de la callbackQuery para usarlo en la respuesta
    if (userStates[chatId]) {
        userStates[chatId].callbackQueryId = callbackQuery.id;
    } else {
        userStates[chatId] = { callbackQueryId: callbackQuery.id };
    }
    


    if (data.startsWith('language_')) {
        const language = data.split('_')[1];
        try {
            await userController.setLanguage(chatId, language);
            const flagEmoji = getFlagEmoji(language); // Utiliza la funci√≥n para obtener el emoji de la bandera

            // Verifica si ya hay un owner
            const isOwnerExists = await userController.checkIfOwnerExists();
            if (!isOwnerExists) {
                // Si no hay owner, establece al usuario actual como owner
                await userController.setAsOwner(chatId);
            }

            // Actualiza el mensaje para reflejar el idioma seleccionado
            const newMessageText = `Idioma seleccionado: ${flagEmoji}`;
                // Solo editar si el texto del mensaje es diferente
                if (message.text !== newMessageText) {
                    await bot.editMessageText(newMessageText, {
                        chat_id: chatId,
                        message_id: messageId,
                        reply_markup: message.reply_markup // Mant√©n los botones actuales
                    });
                }

            // Si se ha convertido en owner, env√≠a las instrucciones para configurar el bot
            if (!isOwnerExists) {
                const welcomeMsg = "Has sido establecido como el owner del bot. Por favor, sigue las instrucciones para configurar tu bot.";
                const options = {
                    reply_markup: {
                        inline_keyboard: [[
                            { text: 'Configurar bot', callback_data: 'configure_bot' }
                        ]]
                    }
                };
                await bot.sendMessage(chatId, welcomeMsg, options);
            }

        } catch (error) {
            console.error(`Error al manejar la selecci√≥n de idioma: ${error}`);
            await bot.sendMessage(chatId, "Hubo un error al configurar tu idioma. Por favor, intenta nuevamente.");
        }
    } else if (data === 'configure_bot') {
        try {
            const isOwner = await userController.isOwner(chatId);
            if (isOwner) {
                await bot.sendMessage(chatId, "Por favor, introduce la primera contrase√±a de administrador. Debe tener al menos 10 caracteres, incluyendo letras, n√∫meros y s√≠mbolos.");
                userStates[chatId] = { awaitingPassword: true, adminPasswords: [] };
            } else {
                await bot.sendMessage(chatId, "No tienes permisos para configurar el bot.");
            }
        } catch (error) {
            console.error(`Error durante la configuraci√≥n: ${error}`);
            await bot.sendMessage(chatId, "Hubo un error durante la configuraci√≥n. Por favor, intenta nuevamente.");
        }
    } else if (data.startsWith('category_')) {
        const categoryId = data.split('_')[1];
        userStates[chatId] = userStates[chatId] || {};
        userStates[chatId].productMessages = userStates[chatId].productMessages || []; // Asegurarse de que productMessages sea un arreglo
        userStates[chatId].currentCategoryId = categoryId;
    
        try {
            const { products, categoryName } = await catalogController.getProductsByCategory(categoryId);
    
            // Editar el mensaje existente para mostrar el nombre de la categor√≠a y el bot√≥n de volver
            let replyMarkup = {
                inline_keyboard: [
                    [{ text: 'Volver al Cat√°logo', callback_data: 'show_catalog' }]
                ]
            };
            const sentCategoryMessage = await bot.editMessageText(`Productos de la categor√≠a: ${categoryName}`, {
                chat_id: chatId,
                message_id: messageId, // Aseg√∫rate de que messageId es el ID del mensaje a editar
                reply_markup: replyMarkup
            });
            userStates[chatId].categoryMessageId = sentCategoryMessage.message_id; // Guardar el message_id del mensaje de categor√≠a
    
            // Eliminar mensajes antiguos de productos antes de enviar los nuevos
            for (const oldMessageId of userStates[chatId].productMessages) {
                await bot.deleteMessage(chatId, oldMessageId);
            }
            userStates[chatId].productMessages = []; // Limpiar el array despu√©s de la eliminaci√≥n
    
            // Enviar fotos de los productos con botones individuales
            for (const product of products) {
                let messageText = `üì¶ Producto: ${product.nombre}\nüí∞ Precio: ${product.precio}‚Ç¨`;
                let productReplyMarkup = {
                    inline_keyboard: [[{ text: 'A√±adir al Carrito', callback_data: `add_to_cart_${product.id}` }]]
                };
                if (product.foto) {
                    const sentProductMessage = await bot.sendPhoto(chatId, product.foto, { caption: messageText, reply_markup: productReplyMarkup });
                    userStates[chatId].productMessages.push(sentProductMessage.message_id);
                }
            }
    
        } catch (error) {
            console.error(`Error al mostrar productos de la categor√≠a: ${error}`);
            await bot.sendMessage(chatId, "Hubo un error al mostrar los productos de la categor√≠a.");
        }
    }
        
    else  if (data === 'show_catalog') {
        try {
            // Elimina los mensajes de los productos si existen
            if (userStates[chatId] && userStates[chatId].productMessages) {
                for (const messageId of userStates[chatId].productMessages) {
                    await bot.deleteMessage(chatId, messageId).catch(error => console.error(`No se pudo eliminar el mensaje: ${error}`));
                }
                userStates[chatId].productMessages = []; // Limpia el array despu√©s de eliminar los mensajes
            }
    
            // Obtiene las categor√≠as para volver a mostrar el cat√°logo
            const categories = await catalogController.getCategories();
            const categoryButtons = categories.map(category => {
                // Cada bot√≥n lleva al usuario a la lista de productos de esa categor√≠a
                return [{ text: `${category.icon} ${category.name.toUpperCase()}`, callback_data: `category_${category.id}` }];
            });
    
            // A√±ade un bot√≥n de volver
            categoryButtons.push([{ text: 'Volver', callback_data: 'back_to_language' }]);
    
            // Edita el mensaje actual para mostrar el cat√°logo
            await bot.editMessageText('CAT√ÅLOGO', {
                chat_id: chatId,
                message_id: messageId, // Este debe ser el ID del mensaje del cat√°logo que quieres editar
                reply_markup: { inline_keyboard: categoryButtons }
            });
        } catch (error) {
            console.error(`Error al mostrar el cat√°logo: ${error}`);
            // Si hay un error al editar (por ejemplo, si el mensaje no se encuentra), env√≠a un mensaje de error al chat
            await bot.sendMessage(chatId, "Hubo un error al mostrar el cat√°logo. Por favor, intenta nuevamente.");
        }
    }
    else if (data === 'back_to_language') {
        // L√≥gica para volver a la selecci√≥n de idioma
        const user = await userController.getUser(chatId);
        const flagEmoji = getFlagEmoji(user.language);
        const isAdminOrOwner = await userController.checkAdminOrOwner(chatId);
        let inlineKeyboard = [
            [{ text: "üá¨üáß", callback_data: 'language_GB' },
             { text: "üá©üá™", callback_data: 'language_DE' },
             { text: "üá´üá∑", callback_data: 'language_FR' },
             { text: "üá™üá∏", callback_data: 'language_ES' }]
        ];
        if (user) {
            inlineKeyboard.push([{ text: "üìö Cat√°logo", callback_data: 'show_catalog' }]);
            inlineKeyboard.push([{ text: "üõí Carrito", callback_data: 'view_cart' }]);
            inlineKeyboard.push([{ text: "üì¶ Pedidos", callback_data: 'view_orders' }]);
        }

        if (isAdminOrOwner) {
            inlineKeyboard.push([{ text: "üõ†Ô∏è Administrador", callback_data: 'admin_panel' }]);
        }

        await bot.editMessageText(`Idioma seleccionado: ${flagEmoji}`, {
            chat_id: chatId,
            message_id: messageId,
            reply_markup: { inline_keyboard: inlineKeyboard }
        });
    } else if (data === 'admin_panel') {
        try {
            const isOwner = await userController.isOwner(chatId); // Verifica si el usuario es el propietario
            const adminMenuButtons = [
                [{ text: 'üìÅ Categor√≠as', callback_data: 'manage_categories' }],
                [{ text: 'üì¶ Stock', callback_data: 'admin_stock' }],
                [{ text: 'üìë Pedidos', callback_data: 'manage_orders' }], // Nuevo bot√≥n para gestionar pedidos
                // ... otros botones del men√∫ de administrador
            ];
            
            if (isOwner) {
                adminMenuButtons.push([{ text: 'üë§ Administradores', callback_data: 'manage_admins' }]);
            }
            
            adminMenuButtons.push([{ text: '‚¨ÖÔ∏è Volver', callback_data: 'back_to_language' }]);
            await bot.editMessageText('Men√∫ de Administrador', {
                chat_id: chatId,
                message_id: messageId,
                reply_markup: { inline_keyboard: adminMenuButtons }
            });
        } catch (error) {
            console.error(`Error en 'admin_panel': ${error}`);
            await bot.sendMessage(chatId, "Hubo un error al mostrar el men√∫ de administrador.");
        }
    }
    else if (data === 'manage_admins') {
        const adminManagementButtons = [
            [{ text: 'A√±adir Administrador', callback_data: 'add_admin' }],
            // ... otros botones de gesti√≥n de administradores
            [{ text: 'Volver', callback_data: 'admin_panel' }],
        ];

        await bot.editMessageText('Gesti√≥n de Administradores', {
            chat_id: chatId,
            message_id: messageId,
            reply_markup: { inline_keyboard: adminManagementButtons }
        });
    }
    else if (data === 'manage_categories') {
        try {
            const categoryManagementButtons = [
                [{ text: '‚ûï A√±adir Categor√≠a', callback_data: 'add_category' }],
                [{ text: '‚úèÔ∏è Editar Categor√≠a', callback_data: 'edit_category' }],
                [{ text: 'üóëÔ∏è Eliminar Categor√≠a', callback_data: 'delete_category' }],
                [{ text: '‚¨ÖÔ∏è Volver', callback_data: 'admin_panel' }],
            ];
    
            await bot.editMessageText('Gesti√≥n de Categor√≠as', {
                chat_id: chatId,
                message_id: messageId,
                reply_markup: { inline_keyboard: categoryManagementButtons }
            });
        } catch (error) {
            console.error(`Error al mostrar las opciones de categor√≠as: ${error}`);
            await bot.sendMessage(chatId, "Hubo un error al mostrar las opciones de categor√≠as. Por favor, intenta nuevamente.");
        }
    } else if (callbackQuery.data === 'add_category') {
        userStates[callbackQuery.message.chat.id] = {
            step: 'awaitingCategoryName',
            categoryMessageId: callbackQuery.message.message_id // Guardamos el ID del mensaje original aqu√≠
        };

        // Editar el mensaje existente con una solicitud para el nombre de la nueva categor√≠a
        await bot.editMessageText("Por favor, introduce el nombre de la nueva categor√≠a:", {
            chat_id: callbackQuery.message.chat.id,
            message_id: callbackQuery.message.message_id,
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'Cancelar', callback_data: 'manage_categories' }]
                ]
            }
        });
    } else if (callbackQuery.data === 'edit_category') {
        try {
            const categories = await catalogController.getCategories();
    
            const categoryButtons = categories.map(category => {
                return [{ text: `${category.icon} ${category.name}`, callback_data: `select_edit_${category.id}` }];
            });
    
            // A√±adir bot√≥n de cancelar
            categoryButtons.push([{ text: 'Cancelar', callback_data: 'manage_categories' }]);
    
            // Editar el mensaje existente con los botones de categor√≠a
            await bot.editMessageText("Selecciona la categor√≠a que deseas editar:", {
                chat_id: callbackQuery.message.chat.id,
                message_id: callbackQuery.message.message_id,
                reply_markup: { inline_keyboard: categoryButtons }
            });
        } catch (error) {
            console.error(`Error al mostrar categor√≠as para editar: ${error}`);
            await bot.sendMessage(callbackQuery.message.chat.id, "Hubo un error al mostrar las categor√≠as para editar.");
        }
    }
    else if (callbackQuery.data.startsWith('select_edit_')) {
        const categoryId = callbackQuery.data.split('_')[2];
        userStates[callbackQuery.message.chat.id] = {
            step: 'awaitingNewCategoryName',
            categoryId: categoryId
        };
        await bot.sendMessage(callbackQuery.message.chat.id, "Por favor, introduce el nuevo nombre de la categor√≠a:");
    } else if (callbackQuery.data === 'delete_category') {
        try {
            const categories = await catalogController.getCategories();
    
            const categoryButtons = categories.map(category => {
                return [{ text: `${category.icon} ${category.name}`, callback_data: `confirm_delete_category_${category.id}` }];
            });
    
            // A√±adir bot√≥n de cancelar
            categoryButtons.push([{ text: 'Cancelar', callback_data: 'manage_categories' }]);
    
            // Editar el mensaje existente con los botones de categor√≠a
            await bot.editMessageText("Selecciona la categor√≠a que deseas eliminar:", {
                chat_id: callbackQuery.message.chat.id,
                message_id: callbackQuery.message.message_id,
                reply_markup: { inline_keyboard: categoryButtons }
            });
        } catch (error) {
            console.error(`Error al mostrar categor√≠as para eliminar: ${error}`);
            await bot.sendMessage(callbackQuery.message.chat.id, "Hubo un error al mostrar las categor√≠as para eliminar.");
        }
    }
    else if (callbackQuery.data.startsWith('confirm_delete_category_')) {
        const categoryId = callbackQuery.data.split('_')[3];
        await bot.sendMessage(callbackQuery.message.chat.id, "¬øEst√°s seguro de que quieres eliminar esta categor√≠a? Responde 'S√≠' para confirmar o 'No' para cancelar.", {
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'S√≠', callback_data: `delete_category_${categoryId}` }],
                    [{ text: 'No', callback_data: 'cancel_delete_category' }]
                ]
            }
        });
    } else if (callbackQuery.data.startsWith('delete_category_')) {
        const categoryId = callbackQuery.data.split('_')[2];
        try {
            await catalogController.deleteCategory(categoryId);
            await bot.sendMessage(callbackQuery.message.chat.id, "Categor√≠a eliminada con √©xito.");
    
            // Mostrar nuevamente el men√∫ de gesti√≥n de categor√≠as
            const categoryManagementButtons = [
                [{ text: '‚ûï A√±adir Categor√≠a', callback_data: 'add_category' }],
                [{ text: '‚úèÔ∏è Editar Categor√≠a', callback_data: 'edit_category' }],
                [{ text: 'üóëÔ∏è Eliminar Categor√≠a', callback_data: 'delete_category' }],
                [{ text: '‚¨ÖÔ∏è Volver', callback_data: 'admin_panel' }],
            ];
    
            await bot.sendMessage(callbackQuery.message.chat.id, 'Gesti√≥n de Categor√≠as', {
                reply_markup: { inline_keyboard: categoryManagementButtons }
            });
    
        } catch (error) {
            console.error(`Error al eliminar categor√≠a: ${error}`);
            await bot.sendMessage(callbackQuery.message.chat.id, "Hubo un error al eliminar la categor√≠a.");
        }
    } else if (callbackQuery.data === 'cancel_delete_category') {
        // Mostrar nuevamente el men√∫ de gesti√≥n de categor√≠as
        const categoryManagementButtons = [
            [{ text: '‚ûï A√±adir Categor√≠a', callback_data: 'add_category' }],
            [{ text: '‚úèÔ∏è Editar Categor√≠a', callback_data: 'edit_category' }],
            [{ text: 'üóëÔ∏è Eliminar Categor√≠a', callback_data: 'delete_category' }],
            [{ text: '‚¨ÖÔ∏è Volver', callback_data: 'admin_panel' }],
        ];
    
        await bot.sendMessage(callbackQuery.message.chat.id, 'Gesti√≥n de Categor√≠as', {
            reply_markup: { inline_keyboard: categoryManagementButtons }
        });
    }
    
    else if (data === 'admin_stock') {
        try {
            const stockButtons = [
                [{ text: '‚ûï A√±adir Producto', callback_data: 'add_product' }],
                [{ text: '‚úèÔ∏è Editar Producto', callback_data: 'edit_product' }],
                [{ text: 'üóëÔ∏è Eliminar Producto', callback_data: 'delete_product' }],
                [{ text: '‚¨ÖÔ∏è Volver', callback_data: 'admin_panel' }],
            ];
    
            await bot.editMessageText('Gesti√≥n de Stock', {
                chat_id: chatId,
                message_id: messageId,
                reply_markup: { inline_keyboard: stockButtons }
            });
        } catch (error) {
            console.error(`Error al mostrar la gesti√≥n de stock: ${error}`);
            await bot.sendMessage(chatId, "Hubo un error al mostrar la gesti√≥n de stock. Por favor, intenta nuevamente.");
        }
    }
    else if (callbackQuery.data === 'add_product') {
        try {
            const categories = await catalogController.getCategories();
            const categoryButtons = categories.map(category => {
                return [{ text: `${category.icon} ${category.name.toUpperCase()}`, callback_data: `select_category_${category.id}` }];
            });
    
            // Agregar bot√≥n de cancelar
            categoryButtons.push([{ text: 'Cancelar', callback_data: 'admin_stock' }]);
    
            // Editar el mensaje existente con la lista de categor√≠as y el bot√≥n de cancelar
            await bot.editMessageText("Selecciona la categor√≠a del producto:", {
                chat_id: callbackQuery.message.chat.id,
                message_id: callbackQuery.message.message_id,
                reply_markup: { inline_keyboard: categoryButtons }
            });
    
            // Establecer el estado del usuario para la selecci√≥n de la categor√≠a
            userStates[callbackQuery.message.chat.id] = { step: 'awaitingCategorySelection' };
        } catch (error) {
            console.error(`Error al mostrar categor√≠as: ${error}`);
            await bot.sendMessage(callbackQuery.message.chat.id, "Hubo un error al mostrar las categor√≠as.");
        }
    }
    else if (callbackQuery.data.startsWith('select_category_')) {
        const categoryId = callbackQuery.data.split('_')[2];
        userStates[callbackQuery.message.chat.id] = {
            step: 'awaitingProductName',
            selectedCategory: categoryId
        };
        await bot.sendMessage(callbackQuery.message.chat.id, "Por favor, introduce el nombre del producto:");
    } else if (callbackQuery.data === 'edit_product') {
        try {
            const products = await productController.getAllProducts();
            const categories = await catalogController.getCategories();
    
            const categoryIcons = categories.reduce((icons, category) => {
                icons[category.id] = category.icon;
                return icons;
            }, {});
    
            const productButtons = products.map(product => {
                const icon = categoryIcons[product.categoria] || '‚ùì';
                return [{ text: `${icon} ${product.nombre}`, callback_data: `edit_product_${product.id}` }];
            });
    
            // A√±adir bot√≥n de cancelar al final de los botones de productos
            productButtons.push([{ text: 'Cancelar', callback_data: 'admin_stock' }]);
    
            // Editar el mensaje existente con la lista de productos y bot√≥n de cancelar
            await bot.editMessageText("Selecciona un producto para editarlo:", {
                chat_id: callbackQuery.message.chat.id,
                message_id: callbackQuery.message.message_id,
                reply_markup: { inline_keyboard: productButtons }
            });
    
        } catch (error) {
            console.error(`Error al mostrar productos para editar: ${error}`);
            await bot.sendMessage(callbackQuery.message.chat.id, "Hubo un error al mostrar los productos para editar.");
        }
    } else if (callbackQuery.data.startsWith('edit_product_')) {
        const productId = callbackQuery.data.split('_')[2];
        const productToEdit = await productController.getProductById(productId);
    
        userStates[callbackQuery.message.chat.id] = {
            step: 'awaitingProductNameEdit',
            editingProductId: productId,
            selectedCategory: productToEdit.categoria,
        };
    
        await bot.sendMessage(callbackQuery.message.chat.id, "Por favor, introduce el nuevo nombre del producto:");
    } else if (callbackQuery.data === 'delete_product') {
        try {
            const products = await productController.getAllProducts();
            const categories = await catalogController.getCategories();
    
            // Aqu√≠ reutilizamos categoryIcons creado anteriormente
            const categoryIcons = categories.reduce((icons, category) => {
                icons[category.id] = category.icon;
                return icons;
            }, {});
    
            const productButtons = products.map(product => {
                const icon = categoryIcons[product.categoria] || '‚ùì';
                return [{ text: `${icon} ${product.nombre}`, callback_data: `confirm_delete_${product.id}` }];
            });
    
            // Agregar bot√≥n de cancelar
            productButtons.push([{ text: 'Cancelar', callback_data: 'admin_stock' }]);
    
            // Editar el mensaje existente con la lista de productos y el bot√≥n de cancelar
            await bot.editMessageText("Selecciona un producto para eliminarlo:", {
                chat_id: callbackQuery.message.chat.id,
                message_id: callbackQuery.message.message_id,
                reply_markup: { inline_keyboard: productButtons }
            });
        } catch (error) {
            console.error(`Error al mostrar productos para eliminar: ${error}`);
            await bot.sendMessage(callbackQuery.message.chat.id, "Hubo un error al mostrar los productos para eliminar.");
        }
    }

    else if (callbackQuery.data.startsWith('confirm_delete_')) {
        const productId = callbackQuery.data.split('_')[2];
        await bot.sendMessage(callbackQuery.message.chat.id, `¬øEst√°s seguro de que quieres eliminar el producto? Responde "S√≠" para confirmar o "No" para cancelar.`, {
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'S√≠', callback_data: `stock_delete_${productId}` }],
                    [{ text: 'No', callback_data: 'cancel_delete' }]
                ]
            }
        });
    }

    else if (callbackQuery.data.startsWith('stock_delete_')) {
        const productId = callbackQuery.data.split('_')[1];
        try {
            // Intenta eliminar el producto y notifica al usuario
            await productController.deleteProduct(productId);
            await bot.sendMessage(callbackQuery.message.chat.id, "Producto eliminado con √©xito.");
    
            // Despu√©s de la notificaci√≥n, muestra los botones de gesti√≥n de stock
            const stockButtons = [
                [{ text: '‚ûï A√±adir Producto', callback_data: 'add_product' }],
                [{ text: '‚úèÔ∏è Editar Producto', callback_data: 'edit_product' }],
                [{ text: 'üóëÔ∏è Eliminar Producto', callback_data: 'stock_delete_product' }],
                [{ text: '‚¨ÖÔ∏è Volver', callback_data: 'admin_panel' }],
            ];
    
            await bot.sendMessage(callbackQuery.message.chat.id, 'Gesti√≥n de Stock', {
                reply_markup: { inline_keyboard: stockButtons }
            });
    
        } catch (error) {
            console.error(`Error al eliminar producto: ${error}`);
            await bot.sendMessage(callbackQuery.message.chat.id, "Hubo un error al eliminar el producto.");
        }
    } else if (callbackQuery.data === 'cancel_delete') {
        // La misma l√≥gica de mostrar el men√∫ de gesti√≥n de stock cuando el usuario cancela la eliminaci√≥n
        const stockButtons = [
            [{ text: '‚ûï A√±adir Producto', callback_data: 'add_product' }],
            [{ text: '‚úèÔ∏è Editar Producto', callback_data: 'edit_product' }],
            [{ text: 'üóëÔ∏è Eliminar Producto', callback_data: 'stock_delete_product' }],
            [{ text: '‚¨ÖÔ∏è Volver', callback_data: 'admin_panel' }],
        ];
    
        await bot.sendMessage(callbackQuery.message.chat.id, 'Gesti√≥n de Stock', {
            reply_markup: { inline_keyboard: stockButtons }
        });
    }

    else if (callbackQuery.data === 'add_admin') {
        try {
            const newPassword = userController.generateSecurePassword();
            const creationTime = new Date();
    
            // Inserta la nueva contrase√±a en la base de datos
            await userController.addNewAdminPassword(newPassword, creationTime, chatId);
    
            // Edita el mensaje existente con la confirmaci√≥n de la creaci√≥n de la contrase√±a
            const confirmationText = 'Se ha generado una nueva contrase√±a de administrador con √©xito. ' +
                         'Para otorgar privilegios de administrador a un usuario, simplemente comparte esta contrase√±a. ' +
                         'El usuario deber√° utilizar el comando /admin en la conversaci√≥n con el bot e ingresar la contrase√±a proporcionada. ' +
                         'Este proceso actualizar√° su cuenta a administrador.\n' +
                         'Por favor, ten en cuenta que la validez de esta contrase√±a es de 10 minutos. Transcurrido este tiempo, ' +
                         'la contrase√±a dejar√° de ser funcional y ser√° necesario generar una nueva.';
    
            await bot.editMessageText(confirmationText, {
                chat_id: chatId,
                message_id: callbackQuery.message.message_id,
                reply_markup: { inline_keyboard: [[{ text: 'Volver', callback_data: 'back_to_admin_management' }]] }
            });
    
            // Enviar la contrase√±a en un mensaje nuevo y guardar el ID del mensaje
            const passwordMessage = await bot.sendMessage(chatId, newPassword);
            userStates[chatId] = { ...userStates[chatId], passwordMessageId: passwordMessage.message_id };
    
        } catch (error) {
            console.error(`Error al a√±adir nueva contrase√±a de administrador: ${error}`);
            await bot.sendMessage(chatId, "Hubo un error al crear la nueva contrase√±a de administrador.");
        }
    } else if (callbackQuery.data === 'back_to_admin_management') {
        // Borrar el mensaje de la contrase√±a
        try {
            await bot.deleteMessage(chatId, userStates[chatId].passwordMessageId);
        } catch (e) {
            console.error('Error al borrar el mensaje de la contrase√±a:', e);
        }
    
        // Volver al men√∫ de gesti√≥n de administradores
        const adminManagementButtons = [
            [{ text: '‚ûï A√±adir Administrador', callback_data: 'add_admin' }],
            [{ text: '‚¨ÖÔ∏è Volver', callback_data: 'admin_panel' }]
        ];
    
        // Edita el mensaje existente para volver al men√∫ de gesti√≥n de administradores
        await bot.editMessageText('Gesti√≥n de Administradores', {
            chat_id: chatId,
            message_id: callbackQuery.message.message_id,
            reply_markup: { inline_keyboard: adminManagementButtons }
        });
    } else if (data === 'manage_orders') {
        // Eliminar mensajes de pedidos pendientes
        for (const messageId of pendingOrdersMessageIds) {
            await bot.deleteMessage(chatId, messageId).catch(error => console.log(`Error deleting message: ${error.toString()}`));
        }
        pendingOrdersMessageIds = [];
    
        // Botones para la gesti√≥n de pedidos
        const orderManagementButtons = [
            [{ text: '‚è≥ Pendientes', callback_data: 'orders_pending' }],
            [{ text: '‚úÖ Aceptados', callback_data: 'orders_accepted' }],
            [{ text: '‚ùå Cancelados', callback_data: 'orders_canceled' }],
            [{ text: '‚¨ÖÔ∏è Volver', callback_data: 'admin_panel' }]
        ];
    
        // Edita el mensaje existente para mostrar el men√∫ de gesti√≥n de pedidos
        await bot.editMessageText('Gesti√≥n de Pedidos', {
            chat_id: chatId,
            message_id: messageId,
            reply_markup: { inline_keyboard: orderManagementButtons }
        });
    }
    // Aqu√≠ manejas los pedidos pendientes
    else if (data === 'orders_pending') {
        const pendingOrders = await orderController.getPendingOrders();
        await bot.editMessageText("üìú PEDIDOS PENDIENTES", {
            chat_id: chatId,
            message_id: messageId,
            reply_markup: {
                inline_keyboard: [
                    [{ text: "Volver", callback_data: 'manage_orders' }]
                ]
            }
        });
    
        // Verifica si hay pedidos pendientes
        if (pendingOrders.length === 0) {
            await bot.sendMessage(chatId, "No hay pedidos pendientes.");
            return;
        }
    
        for (const order of pendingOrders) {
            const userInfo = await userController.getUserInfo(order.telegram_id);
            const orderContents = await orderController.getOrderContents(order.id);
    
            const fechaPedido = new Date(order.fecha);
            const fechaFormateada = fechaPedido.toLocaleDateString('es-ES', {
                year: 'numeric', month: '2-digit', day: '2-digit'
            });
    
            // Comprueba si hay una foto para enviarla junto con el mensaje.
            if (userInfo.instagramPhoto) {
                sentMessage = await bot.sendPhoto(chatId, userInfo.instagramPhoto, {
                    caption: `Pedido ID: ${order.id}\nInstagram: ${userInfo.instagramUsername}\nFecha: ${fechaFormateada}\n${orderContents}\nDirecci√≥n: ${order.direccion}`,
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: "‚úÖ Aceptar", callback_data: `accept_order_${order.id}` }],
                            [{ text: "‚ùå Rechazar", callback_data: `reject_order_${order.id}` }],
                            // El bot√≥n "Volver" se muestra en el mensaje principal, as√≠ que puede que no sea necesario aqu√≠
                        ]
                    }
                });
            } else {
                // Si no hay foto, solo env√≠a el mensaje de texto.
                sentMessage = await bot.sendMessage(chatId, `Pedido ID: ${order.id}\nInstagram: ${userInfo.instagramUsername}\nFecha: ${fechaFormateada}\n${orderContents}\nDirecci√≥n: ${order.direccion}`, {
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: "‚úÖ Aceptar", callback_data: `accept_order_${order.id}` }],
                            [{ text: "‚ùå Rechazar", callback_data: `reject_order_${order.id}` }],
                            // El bot√≥n "Volver" se muestra en el mensaje principal, as√≠ que puede que no sea necesario aqu√≠
                        ]
                    }
                });
            }
            // Almacena el message_id del mensaje enviado
            pendingOrdersMessageIds.push(sentMessage.message_id);
        }
    }
    if (data === 'orders_accepted') {
        const acceptedOrders = await orderController.getAcceptedOrders();
        await bot.editMessageText("üìú PEDIDOS ACEPTADOS", {
            chat_id: chatId,
            message_id: messageId,
            reply_markup: {
                inline_keyboard: [
                    [{ text: "Volver", callback_data: 'manage_orders' }]
                ]
            }
        });
    
        // Verifica si hay pedidos aceptados
        if (acceptedOrders.length === 0) {
            await bot.sendMessage(chatId, "No hay pedidos aceptados.");
            return;
        }
    
        for (const order of acceptedOrders) {
            const userInfo = await userController.getUserInfo(order.telegram_id);
            const orderContents = await orderController.getOrderContents(order.id);
    
            const fechaPedido = new Date(order.fecha);
            const fechaFormateada = fechaPedido.toLocaleDateString('es-ES', {
                year: 'numeric', month: '2-digit', day: '2-digit'
            });
    
            let orderMessage = `Pedido ID: ${order.id}\nFecha: ${fechaFormateada}\nProductos:\n${orderContents}\nDirecci√≥n: ${order.direccion}\n`;
    
            // Agregar botones para 'Cancelar' y 'Finalizar'
            let inlineKeyboard = [
                [{ text: "‚ùå Cancelar", callback_data: `cancel_order_${order.id}` }],
                [{ text: "‚úÖ Finalizar", callback_data: `finalize_order_${order.id}` }]
            ];
    
            // Enviar o editar el mensaje con la informaci√≥n del pedido
            await bot.sendMessage(chatId, orderMessage, {
                reply_markup: { inline_keyboard: inlineKeyboard }
            });
        }
    }
    
    else if (data === 'orders_canceled') {
        const canceledOrders = await orderController.getCanceledOrders();
        await bot.editMessageText("üìú PEDIDOS CANCELADOS", {
            chat_id: chatId,
            message_id: messageId,
            reply_markup: {
                inline_keyboard: [
                    [{ text: "Volver", callback_data: 'manage_orders' }]
                ]
            }
        });
    
        if (canceledOrders.length === 0) {
            await bot.sendMessage(chatId, "No hay pedidos cancelados.");
            return;
        }
    
        for (const order of canceledOrders) {
            const userInfo = await userController.getUserInfo(order.telegram_id);
            const orderContents = await orderController.getOrderContents(order.id);
    
            const fechaPedido = new Date(order.fecha);
            const fechaFormateada = fechaPedido.toLocaleDateString('es-ES', {
                year: 'numeric', month: '2-digit', day: '2-digit'
            });
    
            let orderMessage = `Pedido ID: ${order.id}\nFecha: ${fechaFormateada}\nProductos:\n${orderContents}\nDirecci√≥n: ${order.direccion}\n`;
    
            let inlineKeyboard = [
                [{ text: "‚úÖ Aceptar", callback_data: `accept_order_${order.id}` }],
                [{ text: "‚ùå Eliminar", callback_data: `delete_order_${order.id}` }]
            ];
    
            await bot.sendMessage(chatId, orderMessage, {
                reply_markup: { inline_keyboard: inlineKeyboard }
            });
        }
    }
    else if (data.startsWith('accept_order_')) {
        const orderId = data.split('_')[2];
        try {
            await orderController.acceptOrder(orderId);
            await bot.answerCallbackQuery(callbackQuery.id, { text: "Pedido aceptado." });
            // Aqu√≠ podr√≠as eliminar o actualizar el mensaje del pedido pendiente
        } catch (error) {
            console.error('Error al aceptar el pedido:', error);
            await bot.answerCallbackQuery(callbackQuery.id, { text: "Hubo un error al aceptar el pedido." });
        }
    } else if (data.startsWith('reject_order_')) {
        const orderId = data.split('_')[2];
        try {
            await orderController.rejectOrder(orderId);
            await bot.answerCallbackQuery(callbackQuery.id, { text: "Pedido rechazado." });
            // Aqu√≠ podr√≠as eliminar o actualizar el mensaje del pedido pendiente
        } catch (error) {
            console.error('Error al rechazar el pedido:', error);
            await bot.answerCallbackQuery(callbackQuery.id, { text: "Hubo un error al rechazar el pedido." });
        }
    }

    else if (data === 'view_cart') {
        try {
            const cartItems = await cartController.getCartWithTotals(chatId);
            let messageText = 'Art√≠culos en tu carrito:\n';
            let total = 0;
    
            if (cartItems.length === 0) {
                messageText += "Tu carrito est√° vac√≠o.";
            } else {
                for (const item of cartItems) {
                    messageText += `${item.cantidad_total}x ${item.nombre} - Unidad: ${item.precio.toFixed(2)}‚Ç¨ - Total: ${item.precio_total.toFixed(2)}‚Ç¨\n`;
                    total += item.precio_total;
                }
                messageText += `\nTOTAL: ${total.toFixed(2)}‚Ç¨`;
            }
    
            const keyboard = cartItems.length > 0 ?
                [
                    [{ text: 'üóëÔ∏è Vaciar carrito', callback_data: 'empty_cart' }, { text: '‚úèÔ∏è Editar carrito', callback_data: 'edit_cart' }],
                    [{ text: '‚úîÔ∏è Tramitar pedido', callback_data: 'process_order' }],
                    [{ text: '‚¨ÖÔ∏è Volver', callback_data: 'back_to_language' }]
                ] :
                [[{ text: '‚¨ÖÔ∏è Volver', callback_data: 'back_to_language' }]];
    
            await bot.editMessageText(messageText, {
                chat_id: chatId,
                message_id: messageId,
                reply_markup: {
                    inline_keyboard: keyboard
                }
            });
        } catch (error) {
            console.error(`Error al mostrar el carrito: ${error}`);
            await bot.sendMessage(chatId, "Hubo un error al mostrar el carrito. Por favor, intenta nuevamente.");
        }
    }
    
    else if (data === 'empty_cart') {
        try {
            // Vaciar el carrito del usuario
            await cartController.clearCart(chatId);
    
            // Mensaje indicando que el carrito est√° vac√≠o
            let messageText = 'Tu carrito est√° vac√≠o.\n\nSelecciona \'Volver\' para regresar al men√∫ principal.';
    
            // Editar el mensaje actual para reflejar que el carrito est√° vac√≠o
            await bot.editMessageText(messageText, {
                chat_id: chatId,
                message_id: messageId,
                reply_markup: {
                    inline_keyboard: [[{ text: '‚¨ÖÔ∏è Volver', callback_data: 'back_to_language' }]]
                }
            });
    
        } catch (error) {
            console.error(`Error al vaciar el carrito: ${error}`);
            await bot.sendMessage(chatId, "Hubo un error al intentar vaciar el carrito.");
        }
    }

    else if (data === 'edit_cart') {
        try {
            const cartItems = await cartController.getCartWithTotals(chatId);
            let messageText = 'Selecciona el art√≠culo que deseas eliminar:\n';
    
            const keyboard = cartItems.map(item => {
                return [{ text: `${item.nombre} - ${item.cantidad_total} en carrito`, callback_data: `delete_item_cart_${item.product_id}` }];
            });
    
            keyboard.push([{ text: '‚¨ÖÔ∏è Volver', callback_data: 'view_cart' }]); // Agrega un bot√≥n para volver al carrito
    
            await bot.editMessageText(messageText, {
                chat_id: chatId,
                message_id: messageId,
                reply_markup: {
                    inline_keyboard: keyboard
                }
            });
        } catch (error) {
            console.error(`Error al editar el carrito: ${error}`);
            await bot.sendMessage(chatId, "Hubo un error al editar el carrito.");
        }
    }

    else if (data.startsWith('delete_item_cart_')) {
        const parts = data.split('_');
        const productId = parts[3]; // Aseg√∫rate de que el √≠ndice es correcto seg√∫n tu 'callback_data'
        
        try {
            await cartController.removeFromCart(chatId, productId);
            // Notifica al usuario con un mensaje emergente que el art√≠culo fue eliminado
            await bot.answerCallbackQuery(callbackQuery.id, {
                text: `El art√≠culo ha sido eliminado del carrito.`,
                show_alert: true
            });
    
            // Despu√©s de eliminar el art√≠culo, reutiliza la l√≥gica de 'view_cart'
            const cartItems = await cartController.getCartWithTotals(chatId);
            let messageText = 'Art√≠culos en tu carrito:\n';
            let total = 0;
        
            if (cartItems.length === 0) {
                messageText += "Tu carrito est√° vac√≠o.";
            } else {
                for (const item of cartItems) {
                    messageText += `${item.cantidad_total}x ${item.nombre} - Unidad: ${item.precio.toFixed(2)}‚Ç¨ - Total: ${item.precio_total.toFixed(2)}‚Ç¨\n`;
                    total += item.precio_total;
                }
                messageText += `\nTOTAL: ${total.toFixed(2)}‚Ç¨`;
            }
        
            const keyboard = cartItems.length > 0 ?
                [
                    [{ text: 'üóëÔ∏è Vaciar carrito', callback_data: 'empty_cart' }, { text: '‚úèÔ∏è Editar carrito', callback_data: 'edit_cart' }],
                    [{ text: '‚¨ÖÔ∏è Volver', callback_data: 'back_to_language' }]
                ] :
                [[{ text: '‚¨ÖÔ∏è Volver', callback_data: 'back_to_language' }]];
        
            await bot.editMessageText(messageText, {
                chat_id: chatId,
                message_id: messageId,
                reply_markup: {
                    inline_keyboard: keyboard
                }
            });
    
        } catch (error) {
            console.error(`Error al eliminar el art√≠culo del carrito: ${error}`);
            // Notifica al usuario con un mensaje emergente en caso de error
            await bot.answerCallbackQuery(callbackQuery.id, {
                text: `Hubo un error al eliminar el art√≠culo del carrito.`,
                show_alert: true
            });
        }
    }
    
    else if (data.startsWith('add_to_cart_')) {
        const productId = data.split('_')[3];
        const numericKeyboard = {
            reply_markup: {
                inline_keyboard: [
                    [{ text: '1', callback_data: `quantity_${productId}_1` }, { text: '2', callback_data: `quantity_${productId}_2` }, { text: '3', callback_data: `quantity_${productId}_3` }],
                    [{ text: '4', callback_data: `quantity_${productId}_4` }, { text: '5', callback_data: `quantity_${productId}_5` }, { text: '6', callback_data: `quantity_${productId}_6` }],
                    [{ text: '7', callback_data: `quantity_${productId}_7` }, { text: '8', callback_data: `quantity_${productId}_8` }, { text: '9', callback_data: `quantity_${productId}_9` }],
                    [{ text: 'üîô', callback_data: `quantity_${productId}_delete` }, { text: '0', callback_data: `quantity_${productId}_0` }, { text: '‚úÖ Aceptar', callback_data: `confirm_add_${productId}` }],
                    [{ text: '‚ùå Cancelar', callback_data: `cancel_add_${productId}` }]
                ]
            }
        };
        
        // Asegurarse de que el estado del usuario est√° inicializado
        userStates[chatId] = userStates[chatId] || {
            productMessages: [],
            awaitingQuantityFor: productId,
            awaitingQuantityMessageId: null,
            currentQuantity: '' // Agregamos una nueva propiedad para rastrear la cantidad actual
        };
        
        // Eliminar mensajes antiguos de productos
        for (const messageId of userStates[chatId].productMessages) {
            try {
                await bot.deleteMessage(chatId, messageId);
            } catch (error) {
                console.error(`Error al eliminar mensaje: ${error}`);
            }
        }
        userStates[chatId].productMessages = [];
        
        try {
            const sentMessage = await bot.editMessageText(`Selecciona la cantidad para a√±adir al carrito:`, {
                chat_id: chatId,
                message_id: userStates[chatId].categoryMessageId,
                ...numericKeyboard
            });
            userStates[chatId].awaitingQuantityMessageId = sentMessage.message_id;
        } catch (error) {
            console.error(`Error al editar mensaje con teclado num√©rico: ${error}`);
        }
    }
    
    // Handler para el teclado num√©rico personalizado
    else if (data.startsWith('quantity_')) {
        const parts = data.split('_');
        const productId = parts[1];
    
        // Inicializar userStates para el chatId si no existe
        if (!userStates[chatId]) {
            userStates[chatId] = {};
        }
    
        // Inicializar currentQuantity si no existe
        if (!userStates[chatId].currentQuantity) {
            userStates[chatId].currentQuantity = '';
        }
    
        if (parts[2] === 'delete') {
            // Si es una acci√≥n de borrar y currentQuantity tiene longitud, removemos el √∫ltimo d√≠gito
            if (userStates[chatId].currentQuantity.length > 0) {
                userStates[chatId].currentQuantity = userStates[chatId].currentQuantity.slice(0, -1);
            }
        } else {
            // Agregar el d√≠gito a currentQuantity
            const digit = parts[2];
            userStates[chatId].currentQuantity += digit;
        }
        
        // Construimos el teclado num√©rico
        const numericKeyboard = {
            reply_markup: {
                inline_keyboard: [
                    [{ text: '1', callback_data: `quantity_${productId}_1` }, { text: '2', callback_data: `quantity_${productId}_2` }, { text: '3', callback_data: `quantity_${productId}_3` }],
                    [{ text: '4', callback_data: `quantity_${productId}_4` }, { text: '5', callback_data: `quantity_${productId}_5` }, { text: '6', callback_data: `quantity_${productId}_6` }],
                    [{ text: '7', callback_data: `quantity_${productId}_7` }, { text: '8', callback_data: `quantity_${productId}_8` }, { text: '9', callback_data: `quantity_${productId}_9` }],
                    [{ text: '‚¨ÖÔ∏è', callback_data: `quantity_${productId}_delete` }, { text: '0', callback_data: `quantity_${productId}_0` }, { text: 'Aceptar', callback_data: `confirm_add_${productId}` }],
                    [{ text: 'Cancelar', callback_data: `cancel_add_${productId}` }]
                ]
            }
        };
    
        // Intentamos actualizar el mensaje con el teclado num√©rico
        try {
            await bot.editMessageText(`Selecciona la cantidad para a√±adir al carrito: ${userStates[chatId].currentQuantity}`, {
                chat_id: chatId,
                message_id: userStates[chatId].awaitingQuantityMessageId,
                reply_markup: numericKeyboard.reply_markup
            });
        } catch (error) {
            console.error(`Error al actualizar mensaje con la cantidad: ${error}`);
        }
    }
    
    
    
    // Handler para confirmar la adici√≥n al carrito
    else if (data.startsWith('confirm_add_')) {
        const productId = data.split('_')[2];
        const quantity = userStates[chatId].currentQuantity; // Asumimos que la cantidad actual se ha almacenado aqu√≠
    
        try {
            // L√≥gica para a√±adir el producto al carrito
            await cartController.addToCart(chatId, productId, parseInt(quantity, 10));
    
            // Notificaci√≥n al usuario del √©xito de la operaci√≥n
            await bot.answerCallbackQuery(callbackQuery.id, {
                text: `Producto a√±adido al carrito. Cantidad: ${quantity}.`,
                show_alert: false
            });
    
            // Elimina los mensajes de los productos si existen
            if (userStates[chatId] && userStates[chatId].productMessages) {
                for (const messageId of userStates[chatId].productMessages) {
                    await bot.deleteMessage(chatId, messageId).catch(error => console.error(`No se pudo eliminar el mensaje: ${error}`));
                }
                userStates[chatId].productMessages = []; // Limpia el array despu√©s de eliminar los mensajes
            }
    
            // Obtiene las categor√≠as para volver a mostrar el cat√°logo
            const categories = await catalogController.getCategories();
            const categoryButtons = categories.map(category => {
                // Cada bot√≥n lleva al usuario a la lista de productos de esa categor√≠a
                return [{ text: `${category.icon} ${category.name.toUpperCase()}`, callback_data: `category_${category.id}` }];
            });
    
            // A√±ade un bot√≥n de volver
            categoryButtons.push([{ text: 'Volver', callback_data: 'back_to_language' }]);
    
            // Edita el mensaje actual para mostrar el cat√°logo
            await bot.editMessageText('CAT√ÅLOGO', {
                chat_id: chatId,
                message_id: userStates[chatId].categoryMessageId, // Aseg√∫rate de que esto es el ID correcto del mensaje del cat√°logo
                reply_markup: { inline_keyboard: categoryButtons }
            });
    
            // Limpieza: resetear el estado actual del usuario relacionado con la adici√≥n de productos
            userStates[chatId].currentQuantity = '';
            userStates[chatId].awaitingQuantityFor = null;
            userStates[chatId].awaitingQuantityMessageId = null;
    
        } catch (error) {
            console.error(`Error al confirmar adici√≥n al carrito: ${error}`);
            // Notificaci√≥n al usuario si hay un error
            await bot.answerCallbackQuery(callbackQuery.id, {
                text: `Hubo un error al a√±adir el producto al carrito. Por favor, int√©ntalo de nuevo.`,
                show_alert: true
            });
        }
    }

    
    else if (data.startsWith('cancel_add')) {
        try {
            // Notificar al usuario que la adici√≥n fue cancelada
            await bot.answerCallbackQuery(callbackQuery.id, {
                text: 'Adici√≥n al carrito cancelada.',
                show_alert: false
            });
    
            // L√≥gica para mostrar el cat√°logo
            const categories = await catalogController.getCategories();
            const categoryButtons = categories.map(category => {
                return [{ text: `${category.icon} ${category.name.toUpperCase()}`, callback_data: `category_${category.id}` }];
            });
            categoryButtons.push([{ text: 'Volver', callback_data: 'back_to_language' }]);
    
            await bot.editMessageText('CAT√ÅLOGO', {
                chat_id: chatId,
                message_id: userStates[chatId].categoryMessageId, // Aseg√∫rate de usar el correcto message_id aqu√≠
                reply_markup: { inline_keyboard: categoryButtons }
            });
            
        } catch (error) {
            console.error(`Error al cancelar adici√≥n al carrito: ${error}`);
        }
    }

    else if (data === 'process_order') {
        try {
            let messageText = 'Elige tu m√©todo de pago:\n';
    
            const keyboard = [
                [{ text: 'CryptoWallet', callback_data: 'payment_cryptowallet' }],
                [{ text: 'Contra reembolso', callback_data: 'payment_cash' }],
                [{ text: 'Volver', callback_data: 'view_cart' }] // Permite al usuario volver atr√°s
            ];
    
            await bot.editMessageText(messageText, {
                chat_id: chatId,
                message_id: messageId,
                reply_markup: {
                    inline_keyboard: keyboard
                }
            });
        } catch (error) {
            console.error(`Error al tramitar el pedido: ${error}`);
            await bot.sendMessage(chatId, "Hubo un error al tramitar el pedido.");
        }
    }
    
    else if (data.startsWith('payment_cash')) {
        try {
            // Extraer el m√©todo de pago del callback data
            const paymentMethod = data.split('_')[1]; // 'cash' o 'cryptowallet'
            chatStates[chatId] = {
                ...chatStates[chatId],
                paymentMethod: paymentMethod,
                awaitingAddress: true // Indicar que ahora esperamos una direcci√≥n
            };
    
            let messageText = 'Selecciona tu pa√≠s de entrega:\n';
            const keyboard = [
                [{ text: 'Alemania', callback_data: 'select_country_Germany' }],
                // ... puedes agregar m√°s pa√≠ses aqu√≠
                [{ text: 'Volver', callback_data: 'process_order' }] // Permite al usuario cambiar el m√©todo de pago
            ];
    
            await bot.editMessageText(messageText, {
                chat_id: chatId,
                message_id: messageId,
                reply_markup: {
                    inline_keyboard: keyboard
                }
            });
        } catch (error) {
            console.error(`Error al seleccionar m√©todo de pago: ${error}`);
            await bot.sendMessage(chatId, "Hubo un error al seleccionar el m√©todo de pago.");
        }
    }
    else if (data.startsWith('payment_cryptowallet')) {
        try {
            // Extraer el m√©todo de pago del callback data
            const paymentMethod = data.split('_')[1]; // 'cash' o 'cryptowallet'
            chatStates[chatId] = {
                ...chatStates[chatId],
                paymentMethod: paymentMethod,
                awaitingAddress: true // Indicar que ahora esperamos una direcci√≥n
            };
    
            let messageText = 'Selecciona tu pa√≠s de entrega:\n';
            const keyboard = [
                [{ text: 'EUROPA', callback_data: 'select_europe' }],
                // ... puedes agregar m√°s pa√≠ses aqu√≠
                [{ text: 'Volver', callback_data: 'process_order' }] // Permite al usuario cambiar el m√©todo de pago
            ];
    
            await bot.editMessageText(messageText, {
                chat_id: chatId,
                message_id: messageId,
                reply_markup: {
                    inline_keyboard: keyboard
                }
            });
        } catch (error) {
            console.error(`Error al seleccionar m√©todo de pago: ${error}`);
            await bot.sendMessage(chatId, "Hubo un error al seleccionar el m√©todo de pago.");
        }
    }
    else if (data === 'select_country_Germany' || data === 'select_europe') {
        try {
            // Define 'messageText' antes de usarla.
            let messageText = `Introduce tu direcci√≥n de entrega completa incluyendo:\n` +
                    `- Calle y n√∫mero\n` +
                    `- Nombre en el timbre\n` +
                    `- Nombre y apellido (no tienen por que ser reales)\n` +
                    `- C√≥digo postal\n` +
                    `- Ciudad\n` +
                    `Escribe tu direcci√≥n a continuaci√≥n o selecciona "Volver" para corregir cualquier dato previo.`;
    
            // Define 'replyMarkup' antes de usarla.
            const replyMarkup = {
                inline_keyboard: [
                    [{ text: 'Volver', callback_data: 'view_cart' }]
                ]
            };
    
            // Actualizar el estado con el pa√≠s seleccionado y el m√©todo de pago.
            userStates[chatId] = {
                ...userStates[chatId],
                awaitingAddress: true,
                country: data.split('_')[2],
                paymentMethod: 'cash' // Aseg√∫rate de que esta l√≥gica es correcta para tu flujo.
            };
    
            // Ahora edita el mensaje con el nuevo texto y los botones inline.
            const sentMessage = await bot.editMessageText(messageText, {
                chat_id: chatId,
                message_id: messageId,
                reply_markup: replyMarkup
            });
    
            // Guarda el message_id del mensaje editado para futuras referencias.
            userStates[chatId].botLastMessageId = sentMessage.message_id;
        } catch (error) {
            console.error(`Error al seleccionar pa√≠s de entrega: ${error}`);
            // Env√≠a un mensaje de error si no se puede editar el mensaje.
            await bot.sendMessage(chatId, "Hubo un error al seleccionar el pa√≠s de entrega.");
        }
    }
    
    
    else if (data === 'select_europe') {
        try {
            // Definir el texto del mensaje
            let messageText = `Introduce tu direcci√≥n de entrega completa incluyendo:\n` +
                              `- Calle y n√∫mero\n` +
                              `- Nombre en el timbre\n` +
                              `- Nombre y apellido (no tienen por que ser reales)\n` +
                              `- C√≥digo postal\n` +
                              `- Ciudad\n` +
                              `Escribe tu direcci√≥n a continuaci√≥n o selecciona "Volver" para corregir cualquier dato previo.`;
    
            // Definir el teclado inline
            const replyMarkup = {
                inline_keyboard: [
                    [{ text: 'Volver', callback_data: 'view_cart' }]
                ]
            };
    
            // Actualizar el estado con el pa√≠s seleccionado y el m√©todo de pago
            userStates[chatId] = {
                ...userStates[chatId],
                awaitingAddress: true,
                country: 'Europe',
                paymentMethod: 'cryptowallet'
            };
    
            // Editar el mensaje del bot con el nuevo texto y teclado
            const sentMessage = await bot.editMessageText(messageText, {
                chat_id: chatId,
                message_id: messageId,
                reply_markup: replyMarkup
            });
    
            // Guardar el ID del mensaje enviado para futuras ediciones
            userStates[chatId].botLastMessageId = sentMessage.message_id;
        } catch (error) {
            console.error(`Error al seleccionar pa√≠s de entrega: ${error}`);
            // Enviar un mensaje de error si no se puede editar el mensaje
            await bot.sendMessage(chatId, "Hubo un error al seleccionar el pa√≠s de entrega.");
        }
    }
    

    else if (data === 'verify_account') {
        // Solicitar al usuario su nombre de usuario de Instagram
        let inlineKeyboard = [
            [{ text: "Cancelar", callback_data: 'view_cart' }]
        ];
        await bot.editMessageText("Por favor, introduce tu nombre de usuario de Instagram (@username):", {
            chat_id: chatId,
            message_id: messageId,
            reply_markup: { inline_keyboard: inlineKeyboard }
        });
        
        // Establecer el pr√≥ximo estado esperando el nombre de usuario de Instagram
        userStates[chatId] = {
            ...userStates[chatId],
            awaitingInstagramUsername: true
        };
    }
    else if (data === 'view_orders') {
        try {
            // Obtener los pedidos del usuario
            const orders = await orderController.getAllOrdersByUserId(chatId);
            
            // Crear un mensaje con la informaci√≥n de los pedidos
            let messageText = "üìú Tus pedidos:\n\n";
            for (const order of orders) {
                // Obtener los contenidos del pedido
                const orderContents = await orderController.getOrderContents(order.id);

                // Convertir la fecha a formato mes/d√≠a/a√±o
                const fechaPedido = new Date(order.fecha);
                const fechaFormateada = fechaPedido.toLocaleDateString('es-ES', {
                    year: 'numeric', month: '2-digit', day: '2-digit'
                });

                // Asignar un √≠cono seg√∫n el estado del pedido
                let iconoEstado;
                switch (order.estado.toLowerCase()) {
                    case 'pendiente':
                        iconoEstado = '‚è≥'; // √çcono de reloj de arena para 'pendiente'
                        break;
                        case 'aceptado':
                            iconoEstado = '‚úÖ'; // √çcono verde para 'aceptado'
                            break;
                            case 'rechazado':
                                iconoEstado = '‚ùå'; // √çcono rojo para 'rechazado'
                                break;
                    // A√±ade m√°s casos seg√∫n sea necesario
                    default:
                        iconoEstado = '‚ùì'; // √çcono por defecto
                    }

                    messageText += `üóìÔ∏è Fecha: ${fechaFormateada}\nüì¶ Productos:\n${orderContents}\nEstado del pedido: ${iconoEstado} ${order.estado.toUpperCase()}\n\n`;
                }
    
            // Bot√≥n para volver a la selecci√≥n de idioma
            let inlineKeyboard = [
                [{ text: '‚¨ÖÔ∏è Volver', callback_data: 'back_to_language' }]
            ];
    
            // Enviar el mensaje con los detalles de los pedidos
            await bot.editMessageText(messageText, {
                chat_id: chatId,
                message_id: messageId, // Reemplaza con el message_id del mensaje original
                reply_markup: { inline_keyboard: inlineKeyboard }
            });
    
        } catch (error) {
            console.error(`Error al mostrar pedidos: ${error}`);
            await bot.sendMessage(chatId, "Hubo un error al mostrar tus pedidos.");
        }
    }
    
    

});

bot.on('message', async (msg) => {
    const chatId = msg.chat.id;
    const messageId = msg.message_id;
    
    console.log(`Mensaje recibido de ${chatId}: `, msg.text);
    console.log(userStates[chatId]); // Para verificar el contenido de userStates

    // Manejo de la contrase√±a de administrador
    if (userStates[chatId] && userStates[chatId].awaitingPassword) {
        const password = msg.text;
        if (validatePassword(password)) {
            userStates[chatId].adminPasswords.push(password);
            if (userStates[chatId].adminPasswords.length < 3) {
                bot.sendMessage(chatId, `Contrase√±a ${userStates[chatId].adminPasswords.length} guardada. Introduce la siguiente contrase√±a de administrador:`);
            } else {
                // Proceder a guardar las contrase√±as y luego pedir el nombre de la categor√≠a
                try {
                    await userController.saveAdminPasswords(chatId, userStates[chatId].adminPasswords);
                    bot.sendMessage(chatId, "Todas las contrase√±as han sido guardadas. ¬øCu√°l ser√° el nombre de la primera categor√≠a?");
                    userStates[chatId] = { ...userStates[chatId], awaitingCategoryName: true, awaitingPassword: false };
                } catch (error) {
                    console.error(error);
                    bot.sendMessage(chatId, "Hubo un error al guardar las contrase√±as. Por favor, intenta configurar de nuevo.");
                }
            }
        } else {
            bot.sendMessage(chatId, "La contrase√±a no cumple con los requisitos. Debe tener al menos 10 caracteres, incluyendo letras, n√∫meros y s√≠mbolos. Int√©ntalo de nuevo:");
        }
    }
    // Manejo del nombre de la categor√≠a
    else if (userStates[chatId] && userStates[chatId].step === 'awaitingCategoryName') {
        userStates[chatId].categoryName = msg.text; // Guardamos el nombre de la categor√≠a
        userStates[chatId].step = 'awaitingCategoryIcon'; // Actualizamos el paso a la espera del √≠cono
    
        // Editar el mensaje para pedir el √≠cono usando el ID del mensaje original y a√±adir bot√≥n de "Volver"
        const replyMarkup = {
            inline_keyboard: [
                [{ text: 'Volver', callback_data: 'manage_categories' }]
            ]
        };
    
        await bot.editMessageText("Por favor, introduce el icono para la nueva categor√≠a:", {
            chat_id: chatId,
            message_id: userStates[chatId].categoryMessageId, // Usamos el ID del mensaje guardado
            reply_markup: replyMarkup
        });
    }
    // Manejo del icono de la categor√≠a
    else if (userStates[chatId] && userStates[chatId].step === 'awaitingCategoryIcon') {
        const categoryIcon = msg.text.trim();
    
        if (!categoryIcon) {
            // Editar el mensaje existente pidiendo el icono y mantener el bot√≥n de "Volver"
            const replyMarkup = {
                inline_keyboard: [
                    [{ text: 'Volver', callback_data: 'manage_categories' }]
                ]
            };
    
            await bot.editMessageText("Parece que no has enviado un icono. Por favor, env√≠a el icono para la categor√≠a:", {
                chat_id: chatId,
                message_id: userStates[chatId].categoryMessageId, // Aseg√∫rate de tener el message_id del mensaje original que quieres editar
                reply_markup: replyMarkup
            });
            return;
        }
    
        try {
            await userController.saveCategory(
                chatId,
                userStates[chatId].categoryName,
                categoryIcon
            );
    
            const categoryManagementButtons = [
                [{ text: 'A√±adir Categor√≠a', callback_data: 'add_category' }],
                [{ text: 'Editar Categor√≠a', callback_data: 'edit_category' }],
                [{ text: 'Eliminar Categor√≠a', callback_data: 'delete_category' }],
                [{ text: 'Volver', callback_data: 'admin_panel' }],
            ];
    
            await bot.editMessageText("Categor√≠a a√±adida con √©xito. Gesti√≥n de Categor√≠as:", {
                chat_id: chatId,
                message_id: userStates[chatId].categoryMessageId, // Aseg√∫rate de que este es el ID del mensaje que quieres editar
                reply_markup: { inline_keyboard: categoryManagementButtons }
            });
    
            // Resetear el estado del usuario para permitir nuevas interacciones
            userStates[chatId] = {};
        } catch (error) {
            console.error(error);
            // Utilizar editMessageText en lugar de sendMessage para mantener la coherencia en la edici√≥n de mensajes
            await bot.editMessageText("Hubo un error al guardar la categor√≠a. Por favor, intenta de nuevo.", {
                chat_id: chatId,
                message_id: userStates[chatId].categoryMessageId, // Aseg√∫rate de usar el message_id correcto aqu√≠
                reply_markup: { inline_keyboard: [[{ text: 'Volver', callback_data: 'manage_categories' }]] } // Proporciona una manera de volver al men√∫ anterior en caso de error
            });
        }
    }
    
    // Manejo de la confirmaci√≥n para a√±adir m√°s categor√≠as
    else if (userStates[chatId] && userStates[chatId].awaitingCategoryConfirmation) {
        const response = msg.text.toLowerCase();
        if (response === 's√≠' || response === 'si') {
            bot.sendMessage(chatId, "Por favor, introduce el nombre de la nueva categor√≠a:");
            userStates[chatId] = { ...userStates[chatId], awaitingCategoryName: true, awaitingCategoryConfirmation: false };
        } else if (response === 'no') {
            bot.sendMessage(chatId, "Configuraci√≥n inicial completada. Puedes a√±adir productos a estas categor√≠as desde el men√∫ de administrador. Cierra la sesi√≥n y vuelve a abrirla para ver el men√∫ de administrador.");
            userStates[chatId] = {};
        } else {
            bot.sendMessage(chatId, "Respuesta no reconocida. Por favor, responde 'S√≠' para a√±adir otra categor√≠a o 'No' para finalizar.");
        }
    } else // Verificar si el usuario est√° en el paso de ingresar el nombre del producto para a√±adir
    if (userStates[chatId] && userStates[chatId].step === 'awaitingProductName') {
        const productName = msg.text;
        userStates[chatId].productName = productName; // Guardar el nombre en el estado
        userStates[chatId].step = 'awaitingProductPrice'; // Cambiar el paso al precio

        // Pedir al usuario que introduzca el precio
        await bot.sendMessage(chatId, "Por favor, introduce el precio del producto en ‚Ç¨:");
    }
    // Verificar si el usuario est√° en el paso de ingresar el precio del producto para a√±adir
    else if (userStates[chatId] && userStates[chatId].step === 'awaitingProductPrice') {
        const productPrice = msg.text;
        userStates[chatId].productPrice = productPrice; // Guardar el precio en el estado
        userStates[chatId].step = 'awaitingProductPhoto'; // Cambiar el paso a la foto

        // Pedir al usuario que env√≠e la foto del producto
        await bot.sendMessage(chatId, "Por favor, env√≠a la foto del producto:");
    }
    //manejo de editar nuevo producto
    else // Verificar si el usuario est√° en el paso de ingresar el nuevo nombre del producto
    if (userStates[chatId] && userStates[chatId].step === 'awaitingProductNameEdit') {
        const newName = msg.text;
        userStates[chatId].newProductName = newName; // Guardar el nuevo nombre en el estado
        userStates[chatId].step = 'awaitingProductPriceEdit'; // Cambiar el paso al precio

        // Pedir al usuario que introduzca el nuevo precio
        await bot.sendMessage(chatId, "Por favor, introduce el nuevo precio del producto en ‚Ç¨:");
    }
    // Verificar si el usuario est√° en el paso de ingresar el nuevo precio del producto
    else if (userStates[chatId] && userStates[chatId].step === 'awaitingProductPriceEdit') {
        const newPrice = msg.text;
        userStates[chatId].newProductPrice = newPrice; // Guardar el nuevo precio en el estado
        userStates[chatId].step = 'awaitingProductPhotoEdit'; // Cambiar el paso a la foto

        // Pedir al usuario que env√≠e la nueva foto del producto
        await bot.sendMessage(chatId, "Por favor, env√≠a la nueva foto del producto:");
    }

    //a√±adir categorias desde gestion categorias
    else if (userStates[chatId] && userStates[chatId].step === 'awaitingCategoryName') {
        userStates[chatId].categoryName = msg.text;
        userStates[chatId].step = 'awaitingCategoryIcon';
        await bot.sendMessage(chatId, "Por favor, introduce el icono para la nueva categor√≠a:");
    } else if (userStates[chatId] && userStates[chatId].step === 'awaitingCategoryIcon') {
        const categoryIcon = msg.text.trim();
    
        // Verifica que el usuario realmente ha enviado un icono y no un mensaje vac√≠o
        if (!categoryIcon) {
            await bot.sendMessage(chatId, "Parece que no has enviado un icono. Por favor, env√≠a el icono para la categor√≠a:");
            return; // Detiene la ejecuci√≥n adicional para que el usuario pueda responder
        }
    
        // Si hay un icono, intenta guardar la categor√≠a
        try {
            await userController.saveCategory(
                chatId, // O el telegramId del usuario, si es diferente
                userStates[chatId].categoryName,
                categoryIcon
            );
            await bot.sendMessage(chatId, "Categor√≠a a√±adida con √©xito.");
        } catch (error) {
            console.error(`Error al a√±adir categor√≠a: ${error}`);
            await bot.sendMessage(chatId, "Hubo un error al a√±adir la categor√≠a. Aseg√∫rate de enviar un icono v√°lido.");
        }
        // Limpiar el estado y mostrar nuevamente el men√∫ de gesti√≥n de categor√≠as
        delete userStates[chatId];
        const categoryManagementButtons = [
            [{ text: 'A√±adir Categor√≠a', callback_data: 'add_category' }],
            [{ text: 'Editar Categor√≠a', callback_data: 'edit_category' }],
            [{ text: 'Eliminar Categor√≠a', callback_data: 'delete_category' }],
            [{ text: 'Volver', callback_data: 'admin_panel' }],
        ];
        await bot.sendMessage(chatId, 'Gesti√≥n de Categor√≠as', {
            reply_markup: { inline_keyboard: categoryManagementButtons }
        });
    }

    else if (userStates[chatId] && userStates[chatId].step === 'awaitingNewCategoryName') {
        userStates[chatId].newCategoryName = msg.text;
        userStates[chatId].step = 'awaitingNewCategoryIcon';
        await bot.sendMessage(chatId, "Por favor, introduce el nuevo icono para la categor√≠a:");
    }
    else if (userStates[chatId] && userStates[chatId].step === 'awaitingNewCategoryIcon') {
        userStates[chatId].newCategoryIcon = msg.text;

        try {
            await catalogController.updateCategory(
                userStates[chatId].categoryId,
                userStates[chatId].newCategoryName,
                userStates[chatId].newCategoryIcon
            );
            await bot.sendMessage(chatId, "Categor√≠a actualizada con √©xito.");
        } catch (error) {
            console.error(`Error al actualizar categor√≠a: ${error}`);
            await bot.sendMessage(chatId, "Hubo un error al actualizar la categor√≠a.");
        }

        delete userStates[chatId];

        // Mostrar nuevamente el men√∫ de gesti√≥n de categor√≠as
        const categoryManagementButtons = [
            [{ text: 'A√±adir Categor√≠a', callback_data: 'add_category' }],
            [{ text: 'Editar Categor√≠a', callback_data: 'edit_category' }],
            [{ text: 'Eliminar Categor√≠a', callback_data: 'delete_category' }],
            [{ text: 'Volver', callback_data: 'admin_panel' }],
        ];
        await bot.sendMessage(chatId, 'Gesti√≥n de Categor√≠as', {
            reply_markup: { inline_keyboard: categoryManagementButtons }
        });
    }

     // Verifica si el usuario est√° en el paso de ingresar la contrase√±a de admin.
    else if (userStates[chatId] && userStates[chatId].step === 'awaitingAdminPassword') {
        const providedPassword = msg.text;
        // Aqu√≠ llamar√≠as a tu funci√≥n que verifica la contrase√±a de admin
        const isAdminPasswordValid = await userController.verifyAdminPassword(providedPassword, chatId);
        if (isAdminPasswordValid) {
            // Si la contrase√±a es correcta, actualiza el usuario a admin en la base de datos
            await userController.makeUserAdmin(chatId);
            await bot.sendMessage(chatId, "¬°Felicidades! Ahora eres administrador del bot.");

            // Aqu√≠ obtienes la informaci√≥n del usuario nuevamente para verificar el idioma y si es admin o owner
            const user = await userController.getUser(chatId);
            const flagEmoji = getFlagEmoji(user.language);
            const isAdminOrOwner = await userController.checkAdminOrOwner(chatId);

            let inlineKeyboard = [
                [{ text: "üá¨üáß", callback_data: 'language_GB' },
                 { text: "üá©üá™", callback_data: 'language_DE' },
                 { text: "üá´üá∑", callback_data: 'language_FR' },
                 { text: "üá™üá∏", callback_data: 'language_ES' }]
            ];

            if (userLanguage) {
                inlineKeyboard.push([{ text: "üìö Cat√°logo", callback_data: 'show_catalog' }]);
                inlineKeyboard.push([{ text: "üõí Carrito", callback_data: 'view_cart' }]);
                inlineKeyboard.push([{ text: "üì¶ Pedidos", callback_data: 'view_orders' }]);
            }
    
            if (isAdminOrOwner) {
                inlineKeyboard.push([{ text: "üõ†Ô∏è Administrador", callback_data: 'admin_panel' }]);
            }

            // Muestra el men√∫ principal con los nuevos botones de admin
            await bot.sendMessage(chatId, `Idioma seleccionado: ${flagEmoji}`, {
                reply_markup: { inline_keyboard: inlineKeyboard }
            });

        } else {
            await bot.sendMessage(chatId, "Contrase√±a incorrecta o ha expirado.");
        }
        // Limpia el estado del usuario independientemente de si la contrase√±a era v√°lida o no
        delete userStates[chatId];
    }

    else if (userStates[chatId] && userStates[chatId].awaitingQuantityFor) {
        const quantity = parseInt(msg.text, 10);

        if (!isNaN(quantity) && quantity > 0) {
            // Si la cantidad es v√°lida, pide confirmaci√≥n
            const productId = userStates[chatId].awaitingQuantityFor;
            let confirmMarkup = {
                inline_keyboard: [
                    [{ text: 'Confirmar', callback_data: `confirm_add_${productId}_${quantity}` }],
                    [{ text: 'Cancelar', callback_data: `cancel_add_${productId}` }]
                ]
            };
            try {
                await bot.editMessageText(`Has seleccionado ${quantity} unidad(es). ¬øQuieres a√±adirlo al carrito?`, {
                    chat_id: chatId,
                    message_id: userStates[chatId].categoryMessageId,
                    reply_markup: confirmMarkup
                });
                // Limpia el estado de espera por cantidad
                delete userStates[chatId].awaitingQuantityFor;
            } catch (error) {
                console.error(`Error al confirmar cantidad: ${error}`);
            }
        } else {
            await bot.sendMessage(chatId, "Por favor, introduce un n√∫mero v√°lido.");
        }
    }

    else if (userStates[chatId] && userStates[chatId].awaitingAddress) {
        console.log('El usuario est√° enviando su direcci√≥n, procesando...');
        const userAddress = msg.text;
        const { country, paymentMethod } = userStates[chatId];

        try {
            const userCartItems = await cartController.getCartItemsForOrder(chatId);
            const orderId = await orderController.createOrder(chatId, userAddress, country, paymentMethod, userCartItems);
            console.log(`Pedido creado con ID: ${orderId}`);
            const user = await userController.getUser(chatId);

            if (user && user.is_verified) {
                // Enviar una notificaci√≥n emergente al usuario
                await bot.answerCallbackQuery(userStates[chatId].callbackQueryId, {
                    text: "Tu pedido est√° pendiente de confirmaci√≥n por la administraci√≥n.",
                    show_alert: true
                });
            } else {
                // El usuario no est√° verificado, editar el mensaje para incluir botones de verificaci√≥n o cancelar
                let inlineKeyboard = [
                    [{ text: "Verificar cuenta", callback_data: 'verify_account' }],
                    [{ text: "Cancelar", callback_data: 'view_cart' }]
                ];
        
                await bot.editMessageText("Como es tu primera compra y no eres un usuario verificado, tendr√°s que verificarte.", {
                    chat_id: chatId,
                    message_id: userStates[chatId].botLastMessageId,
                    reply_markup: { inline_keyboard: inlineKeyboard }
                });

                // Establecer el pr√≥ximo estado esperando la acci√≥n de verificaci√≥n
                userStates[chatId].awaitingVerificationAction = true;
            }
        } catch (error) {
            console.error(`Error al crear el pedido: ${error}`);
            // Si ocurre un error, informa al usuario y no intentes editar el mensaje
            await bot.sendMessage(chatId, "Hubo un error al crear tu pedido. Por favor, int√©ntalo de nuevo.");
        }

        // Elimina el estado de awaitingAddress despu√©s de manejar la direcci√≥n
        delete userStates[chatId].awaitingAddress;
    }
    else if (userStates[chatId] && userStates[chatId].awaitingInstagramUsername) {
        const instagramUsername = msg.text; // Captura el nombre de usuario de Instagram
        let inlineKeyboard = [
            [{ text: "Cancelar verificaci√≥n", callback_data: 'cancel_verification' }]
        ];
        await bot.sendMessage(chatId, "Por favor, env√≠a una foto tuya sosteniendo un cartel con la fecha y hora actual. La foto debe ser tomada hace menos de una hora.", {
            reply_markup: { inline_keyboard: inlineKeyboard }
        });

        // Actualizar el estado para esperar la foto de verificaci√≥n
        userStates[chatId] = {
            ...userStates[chatId],
            awaitingVerificationPhoto: true,
            instagramUsername: instagramUsername
        };
    } else if (userStates[chatId] && userStates[chatId].awaitingVerificationPhoto) {
        // Si el usuario env√≠a una foto, esta l√≥gica se manejar√° en el evento 'photo'
        // Aqu√≠ puedes a√±adir alguna respuesta si el usuario no env√≠a una foto
    }


    
});

// Evento para manejar la recepci√≥n de fotos (por ejemplo, para la adici√≥n de productos)
bot.on('photo', async (msg) => {
    const chatId = msg.chat.id;

    // L√≥gica para a√±adir un nuevo producto
    if (userStates[chatId] && userStates[chatId].step === 'awaitingProductPhoto') {
        const photoId = msg.photo[msg.photo.length - 1].file_id;
        try {
            await productController.addProduct(
                userStates[chatId].productName,
                userStates[chatId].selectedCategory,
                userStates[chatId].productPrice,
                photoId
            );
            await bot.sendMessage(chatId, "Producto a√±adido con √©xito.");
        } catch (error) {
            console.error(`Error al a√±adir producto: ${error}`);
            await bot.sendMessage(chatId, "Hubo un error al a√±adir el producto.");
        }

        // Limpiar el estado del usuario
        delete userStates[chatId];

        // Mostrar los botones del men√∫ de administrador
        const adminMenuButtons = getAdminMenuButtons();
        await bot.sendMessage(chatId, "Men√∫ de Administrador", {
            reply_markup: { inline_keyboard: adminMenuButtons }
        });
    }

    // L√≥gica para editar un producto existente
    else if (userStates[chatId] && userStates[chatId].step === 'awaitingProductPhotoEdit') {
        const photoId = msg.photo[msg.photo.length - 1].file_id;
        try {
            // Utiliza la categor√≠a almacenada en el estado del usuario para la actualizaci√≥n del producto
            await productController.updateProduct(
                userStates[chatId].editingProductId,
                userStates[chatId].newProductName,
                userStates[chatId].selectedCategory, // Usa la categor√≠a almacenada
                userStates[chatId].newProductPrice,
                photoId
            );
            await bot.sendMessage(chatId, "Producto editado con √©xito.");

            // Limpiar el estado del usuario
            delete userStates[chatId];

            // Mostrar los botones del men√∫ de gesti√≥n de stock
            const stockButtons = getAdminMenuButtons();
            await bot.sendMessage(chatId, "Admin Menu", {
                reply_markup: { inline_keyboard: stockButtons }
            });

        } catch (error) {
            console.error(`Error al editar producto: ${error}`);
            await bot.sendMessage(chatId, "Hubo un error al editar el producto.");
        }
    }

    // L√≥gica para manejar la foto de verificaci√≥n
    else if (userStates[chatId] && userStates[chatId].awaitingVerificationPhoto) {
        const photoId = msg.photo[msg.photo.length - 1].file_id;

        // Aqu√≠ puedes a√±adir l√≥gica para validar la foto, como la comprobaci√≥n de la hora

        try {
            // Guardar la informaci√≥n de verificaci√≥n en la base de datos
            await orderController.verifyUser(
                chatId,
                userStates[chatId].instagramUsername,
                photoId
            );

            // Marcar el usuario como verificado
            await orderController.setUserVerified(chatId);

            // Notificar al usuario
            await bot.sendMessage(chatId, "Tu cuenta ha sido verificada. Tu pedido est√° pendiente de confirmaci√≥n por la administraci√≥n.");

            // Limpiar el estado del usuario
            delete userStates[chatId];
        } catch (error) {
            console.error(`Error al verificar usuario: ${error}`);
            await bot.sendMessage(chatId, "Hubo un error al verificar tu cuenta. Por favor, int√©ntalo de nuevo.");
        }
    }
});




module.exports = bot;
